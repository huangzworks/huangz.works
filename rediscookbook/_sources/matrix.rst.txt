矩阵
=================

矩阵是一种具有多个行和列的元素矩形阵列，其中的元素通常为数字。

比如以下展示的矩阵就包含了3行4列，其中位于第一行第一列的元素为数字\ ``1``\ 、第一行第二列的元素为\ ``3``\ 、第一行第三列的元素为\ ``9``\ 、第一行第四列的元素为\ ``2``\ ，等等。

.. math::

   \begin{bmatrix} 1 & 3 & 9 & 2 \\ 5 & 20 & 32 & 11 \\ 73 & 28 & 65 & 33 \end{bmatrix}.


矩阵在数学、物理、三维动画等多个领域均有大量应用，是计算机最常储存和处理的数据之一，因此研究如何在Redis中高效地存储矩阵数据是非常有意义的。


需求描述
----------------

你想要使用Redis实现一个矩阵存储程序，以便对矩阵及其包含的元素进行设置和获取操作。


解决方案：使用列表
---------------------------------

因为Redis目前尚未支持能够直接储存矩阵的数据结构，所以程序必需使用已有的数据结构来储存矩阵。最简单直接的一种方法就是使用多个列表来储存一个矩阵，其中每个列表储存矩阵中的一个行。

举个例子，对于前面展示的 :math:`3 \times 4` 矩阵，程序可以使用三个列表来储存它，其中每个列表包含四个元素：

::

        redis> RPUSH Matrix:10086:0 1 3 9 2
        (integer) 4
        redis> RPUSH Matrix:10086:1 5 20 32 11
        (integer) 4
        redis> RPUSH Matrix:10086:2 73 28 65 33
        (integer) 4

这段代码通过三条命令，将矩阵的三个行分别储存在了格式为\ ``Matrix:id:row``\ 的三个列表键里面，其中\ ``id``\ 为矩阵的ID，而\ ``row``\ 则为被储存矩阵的行号。

这样一来，程序就可以通过\ ``LINDEX``\ 命令获取矩阵在指定行上某个列的值，又或者通过\ ``LRANGE``\ 命令获取矩阵在指定行上所有列的值。
比如以下代码就展示了如何获取矩阵第1列的第3个值，以及矩阵第2行所有列的值：

::

        redis> LINDEX Matrix:10086:0 2
        "9"
        redis> LRANGE Matrix:10086:1 0 -1
        1) "5"
        2) "20"
        3) "32"
        4) "11"

与此类似，当程序需要对矩阵指定行列上的值进行设置的时候，只需要使用\ ``LSET``\ 命令即可。作为例子，以下代码展示了如何将第3行第4列的值从\ ``33``\ 修改为\ ``99``\ ：

::

        redis> LINDEX Matrix:10086:2 3   -- 查看当前值
        "33"
        redis> LSET Matrix:10086:2 3 99  -- 设置新值
        OK
        redis> LINDEX Matrix:10086:2 3   -- 查看新值
        "99"

代码清单 CODE_LIST_MATRIX 展示了使用上述原理实现的矩阵程序。

----

代码清单 CODE_LIST_MATRIX 列表实现的矩阵存储程序 ``list_matrix.py``

.. literalinclude:: code/list_matrix.py

----

作为例子，以下代码展示了这个矩阵程序的具体用法：

.. code:: python

        >>> from redis import Redis
        >>> from list_matrix import ListMatrix
        >>> client = Redis(decode_responses=True)
        >>> matrix = ListMatrix(client, "Matrix", 3, 4)
        >>> matrix.init([[1, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]])  # 初始化矩阵
        >>> matrix.get(0, 0)  # 获取指定位置上的值
        1
        >>> matrix.get(0, 1)
        3
        >>> matrix.get_row(0)  # 获取指定行的所有列
        [1, 3, 9, 2]
        >>> matrix.get_all()  # 获取整个矩阵
        [[1, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]]
        >>> matrix.set(0, 0, 10086)  # 设置指定位置的值然后获取矩阵进行检查
        >>> matrix.get_all()
        [[10086, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]]


解决方案：使用位图
----------------------------------

除了列表之外，还可以使用位图来储存矩阵数据。
使用位图储存矩阵数据需要用到\ ``BITFIELD``\ 命令以及它的\ ``SET``\ 、\ ``GET``\ 等子命令，这些命令允许程序将多个指定类型的数字储存在位图的指定偏移量上，又或者从位图的指定偏移量上获取之前储存的数字。

同样以之前展示过的这个矩阵为例：

.. math::

   \begin{bmatrix} 1 & 3 & 9 & 2 \\ 5 & 20 & 32 & 11 \\ 73 & 28 & 65 & 33 \end{bmatrix},

如果想要储存这个矩阵的第一行，那么只需要执行以下命令即可：

::

        redis> BITFIELD Matrix:10086:0 SET i64 #0 1 SET i64 #1 3 SET i64 #2 9 SET i64 #3 2
        1) (integer) 0
        2) (integer) 0
        3) (integer) 0
        4) (integer) 0

与此对应，当想要从矩阵里面取出这一行的时候，只需要执行以下代码即可：

::

        redis> BITFIELD Matrix:10086:0 GET i64 #0 GET i64 #1 GET i64 #2 GET i64 #3
        1) (integer) 1
        2) (integer) 3
        3) (integer) 9
        4) (integer) 2

跟列表矩阵程序一样，位图矩阵程序只需要为矩阵中的每个行分别设置一个位图键，就可以将上述的存取方法从单个行扩展至整个矩阵。

代码清单 CODE_BITMAP_MATRIX 展示了使用位图实现的矩阵数据储存程序。

----

代码清单 CODE_BITMAP_MATRIX 位图实现的矩阵存储程序 ``bitmap_matrix.py``

.. literalinclude:: code/bitmap_matrix.py

----

跟列表矩阵程序相比，位图矩阵程序的一个主要优点是：位图矩阵在默认情况下会把所有元素都看作是\ ``0``\ ，所以它无需初始化即可随时使用并对任意元素进行设置。

比如以下代码就展示了如何使用位图矩阵对稀疏矩阵中少数几个不为\ ``0``\ 的元素进行设置：

.. code:: python

        >>> from redis import Redis
        >>> from bitmap_matrix import BitmapMatrix
        >>> sparse = BitmapMatrix(client, "SparseMatrix", 5, 5)
        >>> sparse.get_all()  # 矩阵默认由元素0组成
        [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
        >>> sparse.set(0, 0, 128)  # 设置元素
        >>> sparse.set(1, 0, 256)
        >>> sparse.set(2, 0, 512)
        >>> sparse.get_all()  # 获取设置后的稀疏矩阵
        [[128, 0, 0, 0, 0], [256, 0, 0, 0, 0], [512, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

可以看到，位图矩阵在默认情况下会把整个矩阵的所有元素都看作是\ ``0``\ 。
当然，对于稠密矩阵，程序仍然可以像之前那样，通过\ ``init()``\ 方法对整个矩阵进行初始化：

.. code:: python

        >>> matrix = BitmapMatrix(client, "DenseMatrix", 3, 4)
        >>> matrix.init([[1, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]])
        >>> matrix.get_all()
        [[1, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]]
        >>> matrix.set(0, 0, 10086)
        >>> matrix.get_all()
        [[10086, 3, 9, 2], [5, 20, 32, 11], [73, 28, 65, 33]]

在这种情况下，位图矩阵的行为跟列表矩阵将完全一致。


重点回顾
---------------

- 矩阵是一种具有多个行和列的元素矩形阵列，其中的元素通常为数字。
  
- 矩阵在数学、物理、三维动画等多个领域均有大量应用，是计算机最常储存和处理的数据之一，因此研究如何在Redis中高效地存储矩阵数据是非常有意义的。

- 储存矩阵最简单直接的一种方法就是使用多个列表来储存一个矩阵，其中每个列表储存矩阵中的一个行。

- 除了列表之外还可以使用位图来储存矩阵数据：跟列表矩阵程序一样，位图矩阵程序只需要为矩阵中的每个行分别设置一个位图键，就可以将储存单个行的方法扩展至储存整个矩阵。

- 跟使用列表储存矩阵相比，使用位图储存矩阵的一个主要优点是：位图矩阵在默认情况下会把所有元素都看作是0，所以它无需初始化即可随时使用并对任意元素进行设置。
